// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: users.sql

package db

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users(
	email, email_verified, name, hashed_password
) VALUES (
	$1, $2, $3, $4
) RETURNING id, role, created_at, updated_at, name, email, email_verified, hashed_password, balance
`

type CreateUserParams struct {
	Email          string         `json:"email"`
	EmailVerified  bool           `json:"email_verified"`
	Name           string         `json:"name"`
	HashedPassword sql.NullString `json:"hashed_password"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.queryRow(ctx, q.createUserStmt, createUser,
		arg.Email,
		arg.EmailVerified,
		arg.Name,
		arg.HashedPassword,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Role,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.Email,
		&i.EmailVerified,
		&i.HashedPassword,
		&i.Balance,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users WHERE id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id uuid.UUID) error {
	_, err := q.exec(ctx, q.deleteUserStmt, deleteUser, id)
	return err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, role, created_at, updated_at, name, email, email_verified, hashed_password, balance FROM users WHERE email = $1 LIMIT 1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.queryRow(ctx, q.getUserByEmailStmt, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Role,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.Email,
		&i.EmailVerified,
		&i.HashedPassword,
		&i.Balance,
	)
	return i, err
}

const getUserById = `-- name: GetUserById :one
SELECT id, role, created_at, updated_at, name, email, email_verified, hashed_password, balance FROM users WHERE id = $1 LIMIT 1
`

func (q *Queries) GetUserById(ctx context.Context, id uuid.UUID) (User, error) {
	row := q.queryRow(ctx, q.getUserByIdStmt, getUserById, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Role,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.Email,
		&i.EmailVerified,
		&i.HashedPassword,
		&i.Balance,
	)
	return i, err
}

const updateUserBalance = `-- name: UpdateUserBalance :one
UPDATE users
SET balance = $2
WHERE id = $1
RETURNING id, role, created_at, updated_at, name, email, email_verified, hashed_password, balance
`

type UpdateUserBalanceParams struct {
	ID      uuid.UUID `json:"id"`
	Balance int32     `json:"balance"`
}

func (q *Queries) UpdateUserBalance(ctx context.Context, arg UpdateUserBalanceParams) (User, error) {
	row := q.queryRow(ctx, q.updateUserBalanceStmt, updateUserBalance, arg.ID, arg.Balance)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Role,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.Email,
		&i.EmailVerified,
		&i.HashedPassword,
		&i.Balance,
	)
	return i, err
}

const updateUserById = `-- name: UpdateUserById :one
UPDATE users
SET 
	name = COALESCE($1, name),
	hashed_password = COALESCE($2, hashed_password),
	balance = COALESCE($3, balance),
	role = COALESCE($4, role),
	updated_at = NOW()
WHERE 
	id = $5
RETURNING id, role, created_at, updated_at, name, email, email_verified, hashed_password, balance
`

type UpdateUserByIdParams struct {
	Name           sql.NullString `json:"name"`
	HashedPassword sql.NullString `json:"hashed_password"`
	Balance        sql.NullInt32  `json:"balance"`
	Role           sql.NullString `json:"role"`
	ID             uuid.UUID      `json:"id"`
}

func (q *Queries) UpdateUserById(ctx context.Context, arg UpdateUserByIdParams) (User, error) {
	row := q.queryRow(ctx, q.updateUserByIdStmt, updateUserById,
		arg.Name,
		arg.HashedPassword,
		arg.Balance,
		arg.Role,
		arg.ID,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Role,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.Email,
		&i.EmailVerified,
		&i.HashedPassword,
		&i.Balance,
	)
	return i, err
}
