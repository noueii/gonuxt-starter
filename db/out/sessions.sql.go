// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: sessions.sql

package db

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const createSession = `-- name: CreateSession :one
INSERT INTO sessions(
	id, user_id, refresh_token, expires_at, user_agent, client_ip
) VALUES ( $1, $2, $3, $4, $5, $6 )
RETURNING id, user_id, refresh_token, created_at, expires_at, user_agent, client_ip, is_revoked
`

type CreateSessionParams struct {
	ID           uuid.UUID `json:"id"`
	UserID       uuid.UUID `json:"user_id"`
	RefreshToken string    `json:"refresh_token"`
	ExpiresAt    time.Time `json:"expires_at"`
	UserAgent    string    `json:"user_agent"`
	ClientIp     string    `json:"client_ip"`
}

func (q *Queries) CreateSession(ctx context.Context, arg CreateSessionParams) (Session, error) {
	row := q.queryRow(ctx, q.createSessionStmt, createSession,
		arg.ID,
		arg.UserID,
		arg.RefreshToken,
		arg.ExpiresAt,
		arg.UserAgent,
		arg.ClientIp,
	)
	var i Session
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.RefreshToken,
		&i.CreatedAt,
		&i.ExpiresAt,
		&i.UserAgent,
		&i.ClientIp,
		&i.IsRevoked,
	)
	return i, err
}

const getSessionById = `-- name: GetSessionById :one
SELECT sessions.id, sessions.user_id, sessions.refresh_token, sessions.created_at, sessions.expires_at, sessions.user_agent, sessions.client_ip, sessions.is_revoked, users.name AS username, users.role as role
FROM sessions
INNER JOIN users ON users.id = sessions.user_id
WHERE sessions.id = $1 
LIMIT 1
`

type GetSessionByIdRow struct {
	ID           uuid.UUID    `json:"id"`
	UserID       uuid.UUID    `json:"user_id"`
	RefreshToken string       `json:"refresh_token"`
	CreatedAt    time.Time    `json:"created_at"`
	ExpiresAt    time.Time    `json:"expires_at"`
	UserAgent    string       `json:"user_agent"`
	ClientIp     string       `json:"client_ip"`
	IsRevoked    sql.NullBool `json:"is_revoked"`
	Username     string       `json:"username"`
	Role         string       `json:"role"`
}

func (q *Queries) GetSessionById(ctx context.Context, id uuid.UUID) (GetSessionByIdRow, error) {
	row := q.queryRow(ctx, q.getSessionByIdStmt, getSessionById, id)
	var i GetSessionByIdRow
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.RefreshToken,
		&i.CreatedAt,
		&i.ExpiresAt,
		&i.UserAgent,
		&i.ClientIp,
		&i.IsRevoked,
		&i.Username,
		&i.Role,
	)
	return i, err
}
